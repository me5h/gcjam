name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  ubuntu:
    name: Test on ubuntu-18.04
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: gcjam 2020 - npm install and test
      run: docker run -v $(pwd)/2020:/app -w /app/test node /bin/bash -c "npm install && npm test"

    - name: gcjam 2021 - npm install and test
      run: docker run -v $(pwd)/2021:/app -w /app/test node /bin/bash -c "npm install && npm test"

  macos:
    name: Test on macos-latest
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install docker
      run: |
        brew cask install docker
        # allow the app to run without confirmation
        xattr -d -r com.apple.quarantine /Applications/Docker.app
        
        # preemptively do docker.app's setup to avoid any gui prompts
        sudo /bin/cp /Applications/Docker.app/Contents/Library/LaunchServices/com.docker.vmnetd /Library/PrivilegedHelperTools
        sudo /bin/cp /Applications/Docker.app/Contents/Resources/com.docker.vmnetd.plist /Library/LaunchDaemons/
        sudo /bin/chmod 544 /Library/PrivilegedHelperTools/com.docker.vmnetd
        sudo /bin/chmod 644 /Library/LaunchDaemons/com.docker.vmnetd.plist
        sudo /bin/launchctl load /Library/LaunchDaemons/com.docker.vmnetd.plist
        open -g -a Docker.app
        
        # Wait for the server to start up, if applicable.
        i=0
        while ! docker system info &>/dev/null; do
          (( i++ == 0 )) && printf %s '-- Waiting for Docker to finish starting up...' || printf '.'
          sleep 1
        done
        (( i )) && printf '\n'
        
        echo "-- Docker is ready."

    - name: gcjam 2020 - npm install and test
      run: docker run -v $(pwd)/2020:/app -w /app/test node /bin/bash -c "npm install && npm test"

    - name: gcjam 2021 - npm install and test
      run: docker run -v $(pwd)/2021:/app -w /app/test node /bin/bash -c "npm install && npm test"
